#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VictorManagement.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kibistaCMS")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertEventTeam(EventTeam instance);
    partial void UpdateEventTeam(EventTeam instance);
    partial void DeleteEventTeam(EventTeam instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertUserChk(UserChk instance);
    partial void UpdateUserChk(UserChk instance);
    partial void DeleteUserChk(UserChk instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["kibistaCMSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<EventTeam> EventTeams
		{
			get
			{
				return this.GetTable<EventTeam>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<UserChk> UserChks
		{
			get
			{
				return this.GetTable<UserChk>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _descrip;
		
		private System.DateTime _startTime;
		
		private System.Nullable<System.DateTime> _endTime;
		
		private string _location;
		
		private EntitySet<EventTeam> _EventTeams;
		
		private EntitySet<Task> _Tasks;
		
		private EntitySet<UserChk> _UserChks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescripChanging(string value);
    partial void OndescripChanged();
    partial void OnstartTimeChanging(System.DateTime value);
    partial void OnstartTimeChanged();
    partial void OnendTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendTimeChanged();
    partial void OnlocationChanging(string value);
    partial void OnlocationChanged();
    #endregion
		
		public Event()
		{
			this._EventTeams = new EntitySet<EventTeam>(new Action<EventTeam>(this.attach_EventTeams), new Action<EventTeam>(this.detach_EventTeams));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			this._UserChks = new EntitySet<UserChk>(new Action<UserChk>(this.attach_UserChks), new Action<UserChk>(this.detach_UserChks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrip", DbType="NVarChar(50)")]
		public string descrip
		{
			get
			{
				return this._descrip;
			}
			set
			{
				if ((this._descrip != value))
				{
					this.OndescripChanging(value);
					this.SendPropertyChanging();
					this._descrip = value;
					this.SendPropertyChanged("descrip");
					this.OndescripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_startTime", DbType="DateTime NOT NULL")]
		public System.DateTime startTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if ((this._startTime != value))
				{
					this.OnstartTimeChanging(value);
					this.SendPropertyChanging();
					this._startTime = value;
					this.SendPropertyChanged("startTime");
					this.OnstartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> endTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if ((this._endTime != value))
				{
					this.OnendTimeChanging(value);
					this.SendPropertyChanging();
					this._endTime = value;
					this.SendPropertyChanged("endTime");
					this.OnendTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_location", DbType="NVarChar(1) NOT NULL", CanBeNull=false)]
		public string location
		{
			get
			{
				return this._location;
			}
			set
			{
				if ((this._location != value))
				{
					this.OnlocationChanging(value);
					this.SendPropertyChanging();
					this._location = value;
					this.SendPropertyChanged("location");
					this.OnlocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventTeam", Storage="_EventTeams", ThisKey="id", OtherKey="eventId")]
		public EntitySet<EventTeam> EventTeams
		{
			get
			{
				return this._EventTeams;
			}
			set
			{
				this._EventTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Task", Storage="_Tasks", ThisKey="id", OtherKey="eventId")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_UserChk", Storage="_UserChks", ThisKey="id", OtherKey="eventId")]
		public EntitySet<UserChk> UserChks
		{
			get
			{
				return this._UserChks;
			}
			set
			{
				this._UserChks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventTeams(EventTeam entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_EventTeams(EventTeam entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
		
		private void attach_UserChks(UserChk entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_UserChks(UserChk entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EventTeam")]
	public partial class EventTeam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _userId;
		
		private int _eventId;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OneventIdChanging(int value);
    partial void OneventIdChanged();
    #endregion
		
		public EventTeam()
		{
			this._Event = default(EntityRef<Event>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int eventId
		{
			get
			{
				return this._eventId;
			}
			set
			{
				if ((this._eventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventIdChanging(value);
					this.SendPropertyChanging();
					this._eventId = value;
					this.SendPropertyChanged("eventId");
					this.OneventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_EventTeam", Storage="_Event", ThisKey="eventId", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.EventTeams.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.EventTeams.Add(this);
						this._eventId = value.id;
					}
					else
					{
						this._eventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventTeam", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.EventTeams.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.EventTeams.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tasks")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _eventId;
		
		private string _name;
		
		private string _descrip;
		
		private EntitySet<UserChk> _UserChks;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OneventIdChanging(int value);
    partial void OneventIdChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OndescripChanging(string value);
    partial void OndescripChanged();
    #endregion
		
		public Task()
		{
			this._UserChks = new EntitySet<UserChk>(new Action<UserChk>(this.attach_UserChks), new Action<UserChk>(this.detach_UserChks));
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventId", DbType="Int NOT NULL")]
		public int eventId
		{
			get
			{
				return this._eventId;
			}
			set
			{
				if ((this._eventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventIdChanging(value);
					this.SendPropertyChanging();
					this._eventId = value;
					this.SendPropertyChanged("eventId");
					this.OneventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_descrip", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string descrip
		{
			get
			{
				return this._descrip;
			}
			set
			{
				if ((this._descrip != value))
				{
					this.OndescripChanging(value);
					this.SendPropertyChanging();
					this._descrip = value;
					this.SendPropertyChanged("descrip");
					this.OndescripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_UserChk", Storage="_UserChks", ThisKey="id", OtherKey="taskId")]
		public EntitySet<UserChk> UserChks
		{
			get
			{
				return this._UserChks;
			}
			set
			{
				this._UserChks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Task", Storage="_Event", ThisKey="eventId", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._eventId = value.id;
					}
					else
					{
						this._eventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserChks(UserChk entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_UserChks(UserChk entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserChk")]
	public partial class UserChk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _eventId;
		
		private int _taskId;
		
		private int _userId;
		
		private System.DateTime _userTime;
		
		private string _userDescription;
		
		private System.Nullable<bool> _userchk1;
		
		private EntityRef<Event> _Event;
		
		private EntityRef<Task> _Task;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OneventIdChanging(int value);
    partial void OneventIdChanged();
    partial void OntaskIdChanging(int value);
    partial void OntaskIdChanged();
    partial void OnuserIdChanging(int value);
    partial void OnuserIdChanged();
    partial void OnuserTimeChanging(System.DateTime value);
    partial void OnuserTimeChanged();
    partial void OnuserDescriptionChanging(string value);
    partial void OnuserDescriptionChanged();
    partial void Onuserchk1Changing(System.Nullable<bool> value);
    partial void Onuserchk1Changed();
    #endregion
		
		public UserChk()
		{
			this._Event = default(EntityRef<Event>);
			this._Task = default(EntityRef<Task>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eventId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int eventId
		{
			get
			{
				return this._eventId;
			}
			set
			{
				if ((this._eventId != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OneventIdChanging(value);
					this.SendPropertyChanging();
					this._eventId = value;
					this.SendPropertyChanged("eventId");
					this.OneventIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_taskId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int taskId
		{
			get
			{
				return this._taskId;
			}
			set
			{
				if ((this._taskId != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OntaskIdChanging(value);
					this.SendPropertyChanging();
					this._taskId = value;
					this.SendPropertyChanged("taskId");
					this.OntaskIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userTime", DbType="DateTime NOT NULL")]
		public System.DateTime userTime
		{
			get
			{
				return this._userTime;
			}
			set
			{
				if ((this._userTime != value))
				{
					this.OnuserTimeChanging(value);
					this.SendPropertyChanging();
					this._userTime = value;
					this.SendPropertyChanged("userTime");
					this.OnuserTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userDescription", DbType="NVarChar(50)")]
		public string userDescription
		{
			get
			{
				return this._userDescription;
			}
			set
			{
				if ((this._userDescription != value))
				{
					this.OnuserDescriptionChanging(value);
					this.SendPropertyChanging();
					this._userDescription = value;
					this.SendPropertyChanged("userDescription");
					this.OnuserDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="userchk", Storage="_userchk1", DbType="Bit")]
		public System.Nullable<bool> userchk1
		{
			get
			{
				return this._userchk1;
			}
			set
			{
				if ((this._userchk1 != value))
				{
					this.Onuserchk1Changing(value);
					this.SendPropertyChanging();
					this._userchk1 = value;
					this.SendPropertyChanged("userchk1");
					this.Onuserchk1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_UserChk", Storage="_Event", ThisKey="eventId", OtherKey="id", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.UserChks.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.UserChks.Add(this);
						this._eventId = value.id;
					}
					else
					{
						this._eventId = default(int);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_UserChk", Storage="_Task", ThisKey="taskId", OtherKey="id", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.UserChks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.UserChks.Add(this);
						this._taskId = value.id;
					}
					else
					{
						this._taskId = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserChk", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserChks.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserChks.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _pass;
		
		private string _email;
		
		private string _types;
		
		private string _phoneNr;
		
		private EntitySet<EventTeam> _EventTeams;
		
		private EntitySet<UserChk> _UserChks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnpassChanging(string value);
    partial void OnpassChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OntypesChanging(string value);
    partial void OntypesChanged();
    partial void OnphoneNrChanging(string value);
    partial void OnphoneNrChanged();
    #endregion
		
		public User()
		{
			this._EventTeams = new EntitySet<EventTeam>(new Action<EventTeam>(this.attach_EventTeams), new Action<EventTeam>(this.detach_EventTeams));
			this._UserChks = new EntitySet<UserChk>(new Action<UserChk>(this.attach_UserChks), new Action<UserChk>(this.detach_UserChks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string pass
		{
			get
			{
				return this._pass;
			}
			set
			{
				if ((this._pass != value))
				{
					this.OnpassChanging(value);
					this.SendPropertyChanging();
					this._pass = value;
					this.SendPropertyChanged("pass");
					this.OnpassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_types", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string types
		{
			get
			{
				return this._types;
			}
			set
			{
				if ((this._types != value))
				{
					this.OntypesChanging(value);
					this.SendPropertyChanging();
					this._types = value;
					this.SendPropertyChanged("types");
					this.OntypesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNr", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string phoneNr
		{
			get
			{
				return this._phoneNr;
			}
			set
			{
				if ((this._phoneNr != value))
				{
					this.OnphoneNrChanging(value);
					this.SendPropertyChanging();
					this._phoneNr = value;
					this.SendPropertyChanged("phoneNr");
					this.OnphoneNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_EventTeam", Storage="_EventTeams", ThisKey="id", OtherKey="userId")]
		public EntitySet<EventTeam> EventTeams
		{
			get
			{
				return this._EventTeams;
			}
			set
			{
				this._EventTeams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserChk", Storage="_UserChks", ThisKey="id", OtherKey="userId")]
		public EntitySet<UserChk> UserChks
		{
			get
			{
				return this._UserChks;
			}
			set
			{
				this._UserChks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EventTeams(EventTeam entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_EventTeams(EventTeam entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserChks(UserChk entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserChks(UserChk entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
